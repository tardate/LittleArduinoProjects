#ifndef WaveTables_h
#define WaveTables_h

// triangle wave, one cycle in 255 data points
// generated with: ./wavetable_generator.rb triangle 255
#define TRIANGLE_WAVE_SIZE 255
const unsigned int TRIANGLE_WAVE_TABLE[TRIANGLE_WAVE_SIZE] PROGMEM = {
    0xFFFF,
    0xFDFD,
    0xFBFB,
    0xF9F9,
    0xF7F7,
    0xF5F5,
    0xF3F3,
    0xF1F1,
    0xEFEF,
    0xEDED,
    0xEBEB,
    0xE9E9,
    0xE7E7,
    0xE5E5,
    0xE3E3,
    0xE1E1,
    0xDFDF,
    0xDDDD,
    0xDBDB,
    0xD9D9,
    0xD7D7,
    0xD5D5,
    0xD3D3,
    0xD1D1,
    0xCFCF,
    0xCDCD,
    0xCBCB,
    0xC9C9,
    0xC7C7,
    0xC5C5,
    0xC3C3,
    0xC1C1,
    0xBFBF,
    0xBDBD,
    0xBBBB,
    0xB9B9,
    0xB7B7,
    0xB5B4,
    0xB3B3,
    0xB1B1,
    0xAFAF,
    0xADAD,
    0xABAB,
    0xA9A9,
    0xA7A7,
    0xA5A4,
    0xA3A3,
    0xA1A1,
    0x9F9F,
    0x9D9D,
    0x9B9B,
    0x9999,
    0x9797,
    0x9594,
    0x9393,
    0x9191,
    0x8F8F,
    0x8D8D,
    0x8B8B,
    0x8989,
    0x8787,
    0x8584,
    0x8383,
    0x8181,
    0x7F7F,
    0x7D7D,
    0x7B7A,
    0x7979,
    0x7777,
    0x7575,
    0x7372,
    0x7171,
    0x6F6F,
    0x6D6D,
    0x6B6A,
    0x6969,
    0x6767,
    0x6565,
    0x6362,
    0x6161,
    0x5F5F,
    0x5D5D,
    0x5B5A,
    0x5959,
    0x5757,
    0x5555,
    0x5352,
    0x5151,
    0x4F4F,
    0x4D4D,
    0x4B4A,
    0x4949,
    0x4747,
    0x4545,
    0x4342,
    0x4141,
    0x3F3F,
    0x3D3D,
    0x3B3A,
    0x3938,
    0x3737,
    0x3535,
    0x3332,
    0x3130,
    0x2F2F,
    0x2D2D,
    0x2B2A,
    0x2928,
    0x2727,
    0x2525,
    0x2322,
    0x2120,
    0x1F1F,
    0x1D1D,
    0x1B1A,
    0x1918,
    0x1717,
    0x1515,
    0x1312,
    0x1110,
    0xF0F,
    0xD0D,
    0xB0A,
    0x908,
    0x707,
    0x505,
    0x302,
    0x100,
    0x100,
    0x302,
    0x504,
    0x706,
    0x909,
    0xB0B,
    0xD0D,
    0xF0F,
    0x1110,
    0x1312,
    0x1514,
    0x1716,
    0x1919,
    0x1B1B,
    0x1D1D,
    0x1F1F,
    0x2120,
    0x2322,
    0x2524,
    0x2726,
    0x2929,
    0x2B2B,
    0x2D2D,
    0x2F2F,
    0x3130,
    0x3332,
    0x3534,
    0x3736,
    0x3939,
    0x3B3B,
    0x3D3D,
    0x3F3F,
    0x4141,
    0x4342,
    0x4544,
    0x4746,
    0x4949,
    0x4B4B,
    0x4D4D,
    0x4F4F,
    0x5151,
    0x5352,
    0x5554,
    0x5756,
    0x5959,
    0x5B5B,
    0x5D5D,
    0x5F5F,
    0x6161,
    0x6362,
    0x6564,
    0x6766,
    0x6969,
    0x6B6B,
    0x6D6D,
    0x6F6F,
    0x7171,
    0x7372,
    0x7574,
    0x7776,
    0x7979,
    0x7B7B,
    0x7D7D,
    0x7F7F,
    0x8181,
    0x8383,
    0x8584,
    0x8786,
    0x8989,
    0x8B8B,
    0x8D8D,
    0x8F8F,
    0x9191,
    0x9393,
    0x9594,
    0x9796,
    0x9999,
    0x9B9B,
    0x9D9D,
    0x9F9F,
    0xA1A1,
    0xA3A3,
    0xA5A4,
    0xA7A6,
    0xA9A9,
    0xABAB,
    0xADAD,
    0xAFAF,
    0xB1B1,
    0xB3B3,
    0xB5B4,
    0xB7B6,
    0xB9B9,
    0xBBBB,
    0xBDBD,
    0xBFBF,
    0xC1C1,
    0xC3C3,
    0xC5C4,
    0xC7C6,
    0xC9C9,
    0xCBCB,
    0xCDCD,
    0xCFCF,
    0xD1D1,
    0xD3D3,
    0xD5D4,
    0xD7D6,
    0xD9D9,
    0xDBDB,
    0xDDDD,
    0xDFDF,
    0xE1E1,
    0xE3E3,
    0xE5E4,
    0xE7E6,
    0xE9E9,
    0xEBEB,
    0xEDED,
    0xEFEF,
    0xF1F1,
    0xF3F3,
    0xF5F4,
    0xF7F6,
    0xF9F9,
    0xFBFB,
    0xFDFD,
};

// sawtooth wave, one cycle in 255 data points
// generated with: ./wavetable_generator.rb sawtooth 255
#define SAWTOOTH_WAVE_SIZE 255
const unsigned int SAWTOOTH_WAVE_TABLE[SAWTOOTH_WAVE_SIZE] PROGMEM = {
    0x0,
    0x101,
    0x202,
    0x303,
    0x404,
    0x505,
    0x606,
    0x707,
    0x808,
    0x909,
    0xA0A,
    0xB0B,
    0xC0C,
    0xD0D,
    0xE0E,
    0xF0F,
    0x1010,
    0x1111,
    0x1212,
    0x1313,
    0x1414,
    0x1515,
    0x1616,
    0x1717,
    0x1818,
    0x1919,
    0x1A1A,
    0x1B1B,
    0x1C1C,
    0x1D1D,
    0x1E1E,
    0x1F1F,
    0x2020,
    0x2121,
    0x2222,
    0x2323,
    0x2424,
    0x2525,
    0x2626,
    0x2727,
    0x2828,
    0x2929,
    0x2A2A,
    0x2B2B,
    0x2C2C,
    0x2D2D,
    0x2E2E,
    0x2F2F,
    0x3030,
    0x3131,
    0x3232,
    0x3333,
    0x3434,
    0x3535,
    0x3636,
    0x3737,
    0x3838,
    0x3939,
    0x3A3A,
    0x3B3B,
    0x3C3C,
    0x3D3D,
    0x3E3E,
    0x3F3F,
    0x4040,
    0x4141,
    0x4242,
    0x4343,
    0x4444,
    0x4545,
    0x4646,
    0x4747,
    0x4848,
    0x4949,
    0x4A4A,
    0x4B4B,
    0x4C4C,
    0x4D4D,
    0x4E4E,
    0x4F4F,
    0x5050,
    0x5151,
    0x5252,
    0x5353,
    0x5454,
    0x5555,
    0x5656,
    0x5757,
    0x5858,
    0x5959,
    0x5A5A,
    0x5B5B,
    0x5C5C,
    0x5D5D,
    0x5E5E,
    0x5F5F,
    0x6060,
    0x6161,
    0x6262,
    0x6363,
    0x6464,
    0x6565,
    0x6666,
    0x6767,
    0x6868,
    0x6969,
    0x6A6A,
    0x6B6B,
    0x6C6C,
    0x6D6D,
    0x6E6E,
    0x6F6F,
    0x7070,
    0x7171,
    0x7272,
    0x7373,
    0x7474,
    0x7575,
    0x7676,
    0x7777,
    0x7878,
    0x7979,
    0x7A7A,
    0x7B7B,
    0x7C7C,
    0x7D7D,
    0x7E7E,
    0x7F7F,
    0x8080,
    0x8181,
    0x8282,
    0x8383,
    0x8484,
    0x8585,
    0x8686,
    0x8787,
    0x8888,
    0x8989,
    0x8A8A,
    0x8B8B,
    0x8C8C,
    0x8D8D,
    0x8E8E,
    0x8F8F,
    0x9090,
    0x9191,
    0x9292,
    0x9393,
    0x9494,
    0x9595,
    0x9696,
    0x9797,
    0x9898,
    0x9999,
    0x9A9A,
    0x9B9B,
    0x9C9C,
    0x9D9D,
    0x9E9E,
    0x9F9F,
    0xA0A0,
    0xA1A1,
    0xA2A2,
    0xA3A3,
    0xA4A4,
    0xA5A5,
    0xA6A6,
    0xA7A7,
    0xA8A8,
    0xA9A9,
    0xAAAA,
    0xABAB,
    0xACAC,
    0xADAD,
    0xAEAE,
    0xAFAF,
    0xB0B0,
    0xB1B1,
    0xB2B2,
    0xB3B3,
    0xB4B4,
    0xB5B5,
    0xB6B6,
    0xB7B7,
    0xB8B8,
    0xB9B9,
    0xBABA,
    0xBBBB,
    0xBCBC,
    0xBDBD,
    0xBEBE,
    0xBFBF,
    0xC0C0,
    0xC1C1,
    0xC2C2,
    0xC3C3,
    0xC4C4,
    0xC5C5,
    0xC6C6,
    0xC7C7,
    0xC8C8,
    0xC9C9,
    0xCACA,
    0xCBCB,
    0xCCCC,
    0xCDCD,
    0xCECE,
    0xCFCF,
    0xD0D0,
    0xD1D1,
    0xD2D2,
    0xD3D3,
    0xD4D4,
    0xD5D5,
    0xD6D6,
    0xD7D7,
    0xD8D8,
    0xD9D9,
    0xDADA,
    0xDBDB,
    0xDCDC,
    0xDDDD,
    0xDEDE,
    0xDFDF,
    0xE0E0,
    0xE1E1,
    0xE2E2,
    0xE3E3,
    0xE4E4,
    0xE5E5,
    0xE6E6,
    0xE7E7,
    0xE8E8,
    0xE9E9,
    0xEAEA,
    0xEBEB,
    0xECEC,
    0xEDED,
    0xEEEE,
    0xEFEF,
    0xF0F0,
    0xF1F1,
    0xF2F2,
    0xF3F3,
    0xF4F4,
    0xF5F5,
    0xF6F6,
    0xF7F7,
    0xF8F8,
    0xF9F9,
    0xFAFA,
    0xFBFB,
    0xFCFC,
    0xFDFD,
    0xFEFE,
};

// sine wave, one cycle in 255 data points
// generated with: ./wavetable_generator.rb sine 255
#define SINE_WAVE_SIZE 255
const unsigned int SINE_WAVE_TABLE[SINE_WAVE_SIZE] PROGMEM = {
    0x7FFF,
    0x8331,
    0x8662,
    0x8993,
    0x8CC2,
    0x8FEF,
    0x9319,
    0x9640,
    0x9964,
    0x9C84,
    0x9F9F,
    0xA2B5,
    0xA5C5,
    0xA8D0,
    0xABD4,
    0xAED1,
    0xB1C7,
    0xB4B4,
    0xB799,
    0xBA76,
    0xBD49,
    0xC012,
    0xC2D1,
    0xC585,
    0xC82F,
    0xCACC,
    0xCD5E,
    0xCFE3,
    0xD25C,
    0xD4C8,
    0xD726,
    0xD976,
    0xDBB8,
    0xDDEB,
    0xE00F,
    0xE224,
    0xE429,
    0xE61F,
    0xE804,
    0xE9D8,
    0xEB9B,
    0xED4E,
    0xEEEF,
    0xF07E,
    0xF1FB,
    0xF366,
    0xF4BF,
    0xF605,
    0xF738,
    0xF858,
    0xF965,
    0xFA5F,
    0xFB45,
    0xFC17,
    0xFCD6,
    0xFD80,
    0xFE17,
    0xFE99,
    0xFF08,
    0xFF62,
    0xFFA8,
    0xFFD9,
    0xFFF6,
    0xFFFE,
    0xFFF3,
    0xFFD2,
    0xFF9E,
    0xFF55,
    0xFEF7,
    0xFE86,
    0xFE00,
    0xFD66,
    0xFCB8,
    0xFBF6,
    0xFB21,
    0xFA37,
    0xF93B,
    0xF82A,
    0xF707,
    0xF5D1,
    0xF488,
    0xF32C,
    0xF1BE,
    0xF03E,
    0xEEAC,
    0xED08,
    0xEB53,
    0xE98D,
    0xE7B6,
    0xE5CE,
    0xE3D6,
    0xE1CF,
    0xDFB7,
    0xDD90,
    0xDB5B,
    0xD917,
    0xD6C4,
    0xD464,
    0xD1F6,
    0xCF7B,
    0xCCF4,
    0xCA60,
    0xC7C1,
    0xC515,
    0xC25F,
    0xBF9F,
    0xBCD4,
    0xB9FF,
    0xB722,
    0xB43B,
    0xB14C,
    0xAE55,
    0xAB57,
    0xA852,
    0xA546,
    0xA235,
    0x9F1E,
    0x9C02,
    0x98E2,
    0x95BD,
    0x9295,
    0x8F6B,
    0x8C3D,
    0x890E,
    0x85DE,
    0x82AC,
    0x7F7A,
    0x7C48,
    0x7917,
    0x75E7,
    0x72B8,
    0x6F8B,
    0x6C62,
    0x693B,
    0x6618,
    0x62F9,
    0x5FDE,
    0x5CC9,
    0x59BA,
    0x56B0,
    0x53AD,
    0x50B1,
    0x4DBD,
    0x4AD1,
    0x47ED,
    0x4512,
    0x4241,
    0x3F79,
    0x3CBC,
    0x3A09,
    0x3762,
    0x34C6,
    0x3236,
    0x2FB3,
    0x2D3C,
    0x2AD3,
    0x2877,
    0x2629,
    0x23EA,
    0x21B9,
    0x1F97,
    0x1D85,
    0x1B82,
    0x198F,
    0x17AD,
    0x15DC,
    0x141B,
    0x126B,
    0x10CD,
    0xF41,
    0xDC7,
    0xC5F,
    0xB09,
    0x9C6,
    0x896,
    0x779,
    0x66F,
    0x579,
    0x496,
    0x3C7,
    0x30B,
    0x264,
    0x1D1,
    0x151,
    0xE6,
    0x8F,
    0x4D,
    0x1F,
    0x5,
    0x0,
    0xF,
    0x33,
    0x6B,
    0xB7,
    0x118,
    0x18D,
    0x216,
    0x2B3,
    0x364,
    0x429,
    0x502,
    0x5EE,
    0x6EE,
    0x802,
    0x928,
    0xA61,
    0xBAD,
    0xD0C,
    0xE7D,
    0x1000,
    0x1195,
    0x133C,
    0x14F3,
    0x16BC,
    0x1896,
    0x1A81,
    0x1C7B,
    0x1E85,
    0x209F,
    0x22C9,
    0x2501,
    0x2747,
    0x299C,
    0x2BFE,
    0x2E6E,
    0x30EB,
    0x3374,
    0x360A,
    0x38AC,
    0x3B59,
    0x3E10,
    0x40D3,
    0x439F,
    0x4675,
    0x4955,
    0x4C3D,
    0x4F2D,
    0x5225,
    0x5524,
    0x582A,
    0x5B37,
    0x5E49,
    0x6161,
    0x647E,
    0x679F,
    0x6AC4,
    0x6DEC,
    0x7117,
    0x7445,
    0x7774,
    0x7AA5,
    0x7DD7,
    0x8109,
    0x843B,
    0x876C,
};

// hump wave, one cycle in 255 data points
// generated with: ./wavetable_generator.rb hump 255
#define HUMP_WAVE_SIZE 255
const unsigned int HUMP_WAVE_TABLE[HUMP_WAVE_SIZE] PROGMEM = {
    0x0,
    0x663,
    0xCC6,
    0x1327,
    0x1985,
    0x1FDF,
    0x2634,
    0x2C82,
    0x32CA,
    0x3909,
    0x3F3F,
    0x456B,
    0x4B8C,
    0x51A2,
    0x57AA,
    0x5DA4,
    0x638F,
    0x696A,
    0x6F34,
    0x74ED,
    0x7A93,
    0x8025,
    0x85A3,
    0x8B0C,
    0x905F,
    0x959A,
    0x9ABE,
    0x9FC8,
    0xA4BA,
    0xA991,
    0xAE4D,
    0xB2ED,
    0xB771,
    0xBBD7,
    0xC020,
    0xC44A,
    0xC854,
    0xCC3F,
    0xD009,
    0xD3B1,
    0xD738,
    0xDA9D,
    0xDDDF,
    0xE0FD,
    0xE3F8,
    0xE6CE,
    0xE97F,
    0xEC0B,
    0xEE71,
    0xF0B2,
    0xF2CB,
    0xF4BF,
    0xF68B,
    0xF82F,
    0xF9AD,
    0xFB02,
    0xFC2F,
    0xFD34,
    0xFE11,
    0xFEC5,
    0xFF51,
    0xFFB3,
    0xFFED,
    0xFFFE,
    0xFFE7,
    0xFFA6,
    0xFF3D,
    0xFEAB,
    0xFDF0,
    0xFD0D,
    0xFC01,
    0xFACD,
    0xF971,
    0xF7EE,
    0xF643,
    0xF470,
    0xF277,
    0xF056,
    0xEE10,
    0xEBA3,
    0xE911,
    0xE65A,
    0xE37E,
    0xE07E,
    0xDD5A,
    0xDA12,
    0xD6A8,
    0xD31B,
    0xCF6D,
    0xCB9E,
    0xC7AE,
    0xC39F,
    0xBF70,
    0xBB22,
    0xB6B7,
    0xB22F,
    0xAD8A,
    0xA8C9,
    0xA3EE,
    0x9EF8,
    0x99E9,
    0x94C2,
    0x8F83,
    0x8A2C,
    0x84C0,
    0x7F3F,
    0x79A9,
    0x7400,
    0x6E45,
    0x6877,
    0x6299,
    0x5CAC,
    0x56B0,
    0x50A5,
    0x4A8E,
    0x446B,
    0x3E3D,
    0x3806,
    0x31C5,
    0x2B7C,
    0x252C,
    0x1ED7,
    0x187C,
    0x121E,
    0xBBD,
    0x55A,
    0x109,
    0x76D,
    0xDD0,
    0x1430,
    0x1A8E,
    0x20E7,
    0x273A,
    0x2D88,
    0x33CE,
    0x3A0C,
    0x4041,
    0x466B,
    0x4C8A,
    0x529D,
    0x58A3,
    0x5E9B,
    0x6483,
    0x6A5C,
    0x7024,
    0x75D9,
    0x7B7C,
    0x810B,
    0x8686,
    0x8BEB,
    0x913A,
    0x9671,
    0x9B91,
    0xA098,
    0xA585,
    0xAA58,
    0xAF0F,
    0xB3AB,
    0xB82A,
    0xBC8C,
    0xC0CF,
    0xC4F4,
    0xC8F9,
    0xCCDF,
    0xD0A3,
    0xD446,
    0xD7C8,
    0xDB27,
    0xDE63,
    0xE17B,
    0xE470,
    0xE740,
    0xE9EB,
    0xEC71,
    0xEED2,
    0xF10C,
    0xF31F,
    0xF50C,
    0xF6D2,
    0xF870,
    0xF9E7,
    0xFB36,
    0xFC5C,
    0xFD5B,
    0xFE31,
    0xFEDF,
    0xFF63,
    0xFFC0,
    0xFFF3,
    0xFFFD,
    0xFFDF,
    0xFF98,
    0xFF28,
    0xFE8F,
    0xFDCE,
    0xFCE4,
    0xFBD2,
    0xFA97,
    0xF935,
    0xF7AB,
    0xF5F9,
    0xF421,
    0xF221,
    0xEFFA,
    0xEDAE,
    0xEB3B,
    0xE8A3,
    0xE5E6,
    0xE304,
    0xDFFD,
    0xDCD4,
    0xD986,
    0xD617,
    0xD285,
    0xCED1,
    0xCAFC,
    0xC707,
    0xC2F3,
    0xBEBF,
    0xBA6C,
    0xB5FC,
    0xB16F,
    0xACC6,
    0xA801,
    0xA321,
    0x9E28,
    0x9915,
    0x93E9,
    0x8EA6,
    0x894C,
    0x83DD,
    0x7E58,
    0x78BF,
    0x7313,
    0x6D54,
    0x6784,
    0x61A4,
    0x5BB4,
    0x55B5,
    0x4FA9,
    0x4990,
    0x436B,
    0x3D3B,
    0x3702,
    0x30C0,
    0x2A76,
    0x2425,
    0x1DCF,
    0x1774,
    0x1115,
    0xAB3,
    0x450,
    0x213,
    0x877,
    0xED9,
};

#endif
